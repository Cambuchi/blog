[{"content":"Introduction What is pagination? Let\u0026rsquo;s say you have a list of items you want to display on your site, displaying the entire list at once can be problematic if it\u0026rsquo;s extremely large or if each list item is resource intensive such as requiring an API call. Pagination is a way to display only a set number of items on your page while allowing easy access to the other items if needed. This is a guide to walk you through the thought process, white-boarding, and implementation of pagination in vanilla JavaScript.\n For those of you that just want the code and don\u0026rsquo;t need the breakdown, I have you covered:\n CodePen examples Just the finished code   White-boarding \u0026amp; Design Process Our pagination module will consist of a single function with a couple callbacks, let\u0026rsquo;s go over what that function will need in order to be successful:\n Parameters required for pagination Design choices / features we will want What the functionality of the pagination will look like Error handling  Here\u0026rsquo;s the entire whiteboard we will use for our function. Please click the image for a full size version. Don\u0026rsquo;t worry we will go over each process one by one:\n\nLet\u0026rsquo;s break it down:\nParameters Our paginate function will require two parameters:\n  The array of objects we want to paginate\n The array will be used to determine the number of pages that need displaying.\n   The current page number\n The page number will be used to determine how the pagination is displayed as well as let our content generating function know what chunk of content to render.\n   Design Pagination requires asking the following questions:\n How many pages are you going to have?  For this project we will display 5 items per page. This determines our page numbers.   How many pagination items will you display?  I prefer 5, 9, or 11 as the number of pagination items to display, dependent on screen size. This is up to the developer. For this project we will be going with 9.   Any extra features?  Most pagination UIs have a next and previous button. We will include those features as well.    Functionality Our pagination will need the following functionality:\n Render the pagination elements:   When there are a few pages, we can just render all of the pages like so:\n [prev] [1, 2, 3, 4, 5, 6, 7] [next]\n   When there are many pages, how we render will depend on the current page number.\n  When the page number is in the early ranges:\n [prev] [1, 2, 3, 4, ..., 99, 100] [next]\n   When the page number is in the middle range:\n [prev] [1, ..., 45, 46, 47 ..., 100] [next]\n   When the page number is in the end ranges:\n [prev] [1, 2, ..., 97, 98, 99, 100] [next]\n    Notice how each of the display styles have the same number of pagination items displayed. This is the consistent behavior we want.\n    Create pagination items that have the following functionality when clicked:  Re-draw the pagination element and update the page numbers of buttons. Update the previous and next button page number pointers. Because if you were on page 3 those pointed to page 2 and 4 respectively, but if you suddenly jump to page 55 then those buttons need to point to different numbers. Set styling so that the current page number stands out from the others. Send the information to the content rendering function so that the correct slice of the array is rendered into the content area.    Errors and possible issues Lets' handle any possible errors that might occur.\n  What happens when the current page number sent to the pagination function is out of range of the page numbers? For example let\u0026rsquo;s say we are at page 1 and we click the previous button, or oppositely, we are at the last page and click the next button; how would out of range pages be handled?\n Solution: detect invalid page numbers being passed in, and return out of any linked rendering function.\n   What happens when the array passed in is empty? Let\u0026rsquo;s say our content has a search function, when the search input returns an empty list, how should our paginate function render?\n Solution: empty arrays should result in an empty pagination since no content is rendered.\n   Implementation Alright, let\u0026rsquo;s build our pagination module!\nOur HTML model in this example covers just the essentials:\n1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;paginate-item-container\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;previous\u0026#34;\u0026gt; \u0026amp;lt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;paginate-items\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;next\u0026#34;\u0026gt; \u0026amp;gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt;    Note: our previous and next buttons are using html code to represent the \u0026lt; and \u0026gt; characters.\n First let\u0026rsquo;s enter in our parameters, set our design variables, and do initial prep:\n Note: comments with +++ in them indicates that the code below is new\n 1 2 3 4 5 6 7 8 9  // +++ create the pagination for the current array and page number const paginate = (array, current) =\u0026gt; { // +++ display 5 items per page  let itemsPerPage = 5; // +++ get the current total number of pages, make sure to round up  let numPages = Math.ceil(array.length / itemsPerPage); // +++ target our DOM elements for manipulation  const paginateItems = document.getElementById(\u0026#39;paginate-items\u0026#39;); };   Next let\u0026rsquo;s handle our errors:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  const paginate = (array, current) =\u0026gt; { // display 5 items per page  let itemsPerPage = 5; // get the current total number of pages, make sure to round up  let numPages = Math.ceil(array.length / itemsPerPage); // target our DOM elements for manipulation  const paginateItems = document.getElementById(\u0026#39;paginate-items\u0026#39;); // +++ error: if the array is empty, empty the pagination display  if (array.length \u0026lt; 1) { // +++ clear the pagination elements  paginateItems.innerHTML = \u0026#39;\u0026#39;; // +++ exit the function so that nothing else is done  return } // +++ error: if current page number is out of range, do nothing  if (current \u0026lt; 1 || current \u0026gt; numPages) { // +++ exit the function so that nothing else is done  return } };   Let\u0026rsquo;s add our functionality in, starting with the previous and next buttons:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  const paginate = (array, current) =\u0026gt; { // display 5 items per page  let itemsPerPage = 5; // get the current total number of pages, make sure to round up  let numPages = Math.ceil(array.length / itemsPerPage); // target our DOM elements for manipulation  const paginateItems = document.getElementById(\u0026#39;paginate-items\u0026#39;); // error: if the array is empty, empty the pagination display  if (array.length \u0026lt; 1) { // clear the pagination elements  paginateItems.innerHTML = \u0026#39;\u0026#39;; // exit the function so that nothing else is done  return } // error: if current page number is out of range, do nothing  if (current \u0026lt; 1 || current \u0026gt; numPages) { // exit the function so that nothing else is done  return } // +++ apply functionality to the previous and next buttons  // +++ target the previous and next DOM elements  let next = document.getElementById(\u0026#39;next\u0026#39;); let previous = document.getElementById(\u0026#39;previous\u0026#39;); // +++ remove previous event handlers (so event handlers don\u0026#39;t pile up)  next.onclick = null; previous.onclick = null; // +++ update the previous and next buttons to do the following:  // +++ 1. re-render the pagination elements with new current page  // +++ 2. send the array and new current page to render correct content  previous.onclick = function () { paginate(array, current - 1); renderContent(array, current - 1, itemsPerPage, numPages); }; next.onclick = function () { paginate(array, current + 1); renderContent(array, current + 1, itemsPerPage, numPages); }; };   For completeness sake, here\u0026rsquo;s an example of what a renderContent function in this use case might look like:\n Here we assume the array will just be an array of numbers from 1 - 100.\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  // render the content const renderContent = (array, current, itemsPerPage, numPages) =\u0026gt; { // if current page number is out of range, do nothing  if (current \u0026lt; 1 || current \u0026gt; numPages) { // exit the function so that nothing else is done  return; } // using the page number, determine what slice of the list to render  current -= 1; let increment = current * itemsPerPage; // as the page number increases, the bottom and top of the slice should  // increase accordingly (e.g. (0, 5) to (5, 10) etc. )  let start = 0 + increment; let end = itemsPerPage + increment; let activeData = array.slice(start, end); // target the content container to add items to  let content = document.getElementById(\u0026#39;content\u0026#39;); // empty out the current contents  content.innerHTML = \u0026#39;\u0026#39;; // fill with the new content  activeData.forEach((item) =\u0026gt; { const listItem = document.createElement(\u0026#39;li\u0026#39;); listItem.textContent = item content.append(listItem); }); };   With that out of the way, let\u0026rsquo;s add our pagination number items. First we add the logic for when the page numbers are low (in our case less than 7).\n Remember we want it to look like this: [prev] [1, 2, 3, 4, 5, 6, 7] [next]\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  const paginate = (array, current) =\u0026gt; { // ... collapsed previous code for clarity  // +++ clear previous pagination numbers so that we can redraw them  paginateItems.innerHTML = \u0026#39;\u0026#39;; // +++ add the pagination number items  // +++ if the total page number is low, just render all the page numbers  if (numPages \u0026lt; 8) { for (let i = 1; i \u0026lt;= numPages; i++) { // +++ create the pagination number element  const paginateNum = document.createElement(\u0026#39;div\u0026#39;); paginateNum.classList = \u0026#39;paginate-num\u0026#39;; paginateNum.textContent = i; // +++ apply styling if number matches current number  if (current === i) { paginateNum.classList.add(\u0026#39;active\u0026#39;); } // +++ apply click event for pagination element  paginateNum.onclick = function () { // +++ re-render the pagination elements with pagination item number  paginate(array, i); // +++ render content based on pagination item number  renderContent(array, i, itemsPerPage, numPages); }; // +++ add number into pagination container  paginateItems.append(paginateNum); } } };   Since we\u0026rsquo;re going to be adding pagination numbers very often, to maintain DRY let\u0026rsquo;s relegate this task to it\u0026rsquo;s own function.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  // add a single pagination number to the DOM const addPaginateNum = (array, i, current, itemsPerPage, numPages) =\u0026gt; { // target our DOM elements for manipulation  const paginateItems = document.getElementById(\u0026#39;paginate-items\u0026#39;); // create the pagination number element  const paginateNum = document.createElement(\u0026#39;div\u0026#39;); paginateNum.classList = \u0026#39;paginate-num\u0026#39;; paginateNum.textContent = i; // apply styling if number matches current number  if (current === i) { paginateNum.classList.add(\u0026#39;active\u0026#39;); } // apply click event for pagination element  paginateNum.onclick = function () { // re-render the pagination elements with pagination item number  paginate(array, i); // render content based on pagination item number  renderContent(array, i, itemsPerPage, numPages); }; // add number into pagination container  paginateItems.append(paginateNum); };   Now our previous paginate number functionality looks much cleaner.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  const paginate = (array, current) =\u0026gt; { // ... collapsed previous code for clarity  // clear previous pagination numbers so that we can redraw them  paginateItems.innerHTML = \u0026#39;\u0026#39;; // add the pagination number items  // if the total page number is low, just render all the page numbers  if (numPages \u0026lt; 8) { for (let i = 1; i \u0026lt;= numPages; i++) { addPaginateNum(array, i, current, itemsPerPage, numPages); } } };   Before we move ahead with longer page number cases. We can predict that we will need to dynamically add ... skip items to our pagination items depending on where the current page number is. Let\u0026rsquo;s create a function for this as well so we can call it when we need it.\n1 2 3 4 5 6 7 8 9 10 11  // add a \u0026#34;...\u0026#34; pagination item for long pagination lists const addPaginateSkip = () =\u0026gt; { // target our DOM elements for manipulation  const paginateItems = document.getElementById(\u0026#39;paginate-items\u0026#39;); // create the pagination skip  const paginateSkip = document.createElement(\u0026#39;div\u0026#39;); paginateSkip.classList = \u0026#39;paginate-skip\u0026#39;; paginateSkip.textContent = \u0026#39;. . .\u0026#39;; //add the pagination skip  paginateItems.append(paginateSkip); };   Continuing with functionality, we are going to add our render cases for when the total number of pages is greater than 7. Remember that we have 3 different render cases:\n  When the page number is in the early ranges:\n [prev] [1, 2, 3, 4, ..., 99, 100] [next]\n   When the page number is in the middle range:\n [prev] [1, ..., 45, 46, 47 ..., 100] [next]\n   When the page number is in the end ranges:\n [prev] [1, 2, ..., 97, 98, 99, 100] [next]\n   Let\u0026rsquo;s start with the first case, the early ranges.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  const paginate = (array, current) =\u0026gt; { // ... collapsed previous code for clarity  // clear previous pagination numbers so that we can redraw them  paginateItems.innerHTML = \u0026#39;\u0026#39;; // add the pagination number items  // if the total page number is low, just render all the page numbers  if (numPages \u0026lt; 8) { for (let i = 1; i \u0026lt;= numPages; i++) { addPaginateNum(array, i, current, itemsPerPage, numPages); } // +++ if the total number of pages is greater than 7  } else if (numPages \u0026gt; 7) { // +++ if the current page number is in the early ranges (here less than 4)  if (current \u0026lt; 4) { // +++ render all the early numbers  for (let i = 1; i \u0026lt; 5; i++) { addPaginateNum(array, i, current, itemsPerPage, numPages); } // +++ render a paginate skip  addPaginateSkip(); // +++ render the last two page numbers  for (let i = numPages - 1; i \u0026lt;= numPages; i++) { addPaginateNum(array, i, current, itemsPerPage, numPages); } } } };   Extending this pattern to the next two display cases is relatively straightforward.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58  const paginate = (array, current) =\u0026gt; { // ... collapsed previous code for clarity  // clear previous pagination numbers so that we can redraw them  paginateItems.innerHTML = \u0026#39;\u0026#39;; // add the pagination number items  // if the total page number is low, just render all the page numbers  if (numPages \u0026lt; 8) { for (let i = 1; i \u0026lt;= numPages; i++) { addPaginateNum(array, i, current, itemsPerPage, numPages); } // if the total number of pages is greater than 7  } else if (numPages \u0026gt; 7) { // if the current page number is in the early ranges (here less than 4)  if (current \u0026lt; 4) { // render all the early numbers  for (let i = 1; i \u0026lt; 5; i++) { addPaginateNum(array, i, current, itemsPerPage, numPages); } // render a paginate skip  addPaginateSkip(); // render the last two page numbers  for (let i = numPages - 1; i \u0026lt;= numPages; i++) { addPaginateNum(array, i, current, itemsPerPage, numPages); } // +++ if the current page number is in the middle (3 \u0026lt; current \u0026lt; max - 2)  } else if (current \u0026gt; 3 \u0026amp;\u0026amp; current \u0026lt; numPages - 2) { // +++ render the first number  addPaginateNum(array, 1, current, itemsPerPage, numPages); // +++ render a paginate skip  addPaginateSkip(); // +++ render the current number and it\u0026#39;s adjacent numbers as well  for (let i = current - 1; i \u0026lt;= current + 1; i++) { addPaginateNum(array, i, current, itemsPerPage, numPages); } // +++ render a paginate skip  addPaginateSkip(); // +++ render the last number  addPaginateNum(array, numPages, current, itemsPerPage, numPages); // +++ if current page number is at the end ranges (greater than max - 3)  } else if (current \u0026gt;= numPages - 2) { // +++ render the first two numbers  addPaginateNum(array, 1, current, itemsPerPage, numPages); addPaginateNum(array, 2, current, itemsPerPage, numPages); // +++ render a paginate skip  addPaginateSkip(); // +++ render the end numbers  for (let i = numPages - 3; i \u0026lt;= numPages; i++) { addPaginateNum(array, i, current, itemsPerPage, numPages); } } } };   And with that we are done! Let\u0026rsquo;s take one final look at the entire thing before we look at a live example of it in action.\nFinished Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158  const paginate = (array, current) =\u0026gt; { // display 5 items per page  let itemsPerPage = 5; // get the current total number of pages, make sure to round up  let numPages = Math.ceil(array.length / itemsPerPage); // target our DOM elements for manipulation  const paginateItems = document.getElementById(\u0026#39;paginate-items\u0026#39;); // error: if the array is empty, empty the pagination display  if (array.length \u0026lt; 1) { // clear the pagination elements  paginateItems.innerHTML = \u0026#39;\u0026#39;; // exit the function so that nothing else is done  return; } // error: if current page number is out of range, do nothing  if (current \u0026lt; 1 || current \u0026gt; numPages) { // exit the function so that nothing else is done  return; } // apply functionality to the previous and next buttons  // target the previous DOM elements  let next = document.getElementById(\u0026#39;next\u0026#39;); let previous = document.getElementById(\u0026#39;previous\u0026#39;); // remove previous event handlers (so event handlers don\u0026#39;t pile up)  next.onclick = null; previous.onclick = null; // update the previous and next buttons to do the following:  // 1. re-render the pagination elements with new current page  // 2. send the array and new current page to render correct content  previous.onclick = function () { paginate(array, current - 1); renderContent(array, current - 1, itemsPerPage, numPages); }; next.onclick = function () { paginate(array, current + 1); renderContent(array, current + 1, itemsPerPage, numPages); }; // clear previous pagination numbers so that we can redraw them  paginateItems.innerHTML = \u0026#39;\u0026#39;; // add the pagination number items  // if the total page number is low, just render all the page numbers  if (numPages \u0026lt; 8) { for (let i = 1; i \u0026lt;= numPages; i++) { addPaginateNum(array, i, current, itemsPerPage, numPages); } // if the total number of pages is greater than 7  } else if (numPages \u0026gt; 7) { // if the current page number is in the early ranges (here less than 4)  if (current \u0026lt; 4) { // render all the early numbers  for (let i = 1; i \u0026lt; 5; i++) { addPaginateNum(array, i, current, itemsPerPage, numPages); } // render a paginate skip  addPaginateSkip(); // render the last two page numbers  for (let i = numPages - 1; i \u0026lt;= numPages; i++) { addPaginateNum(array, i, current, itemsPerPage, numPages); } // if the current page number is in the middle (3 \u0026lt; current \u0026lt; max - 2)  } else if (current \u0026gt; 3 \u0026amp;\u0026amp; current \u0026lt; numPages - 2) { // render the first number  addPaginateNum(array, 1, current, itemsPerPage, numPages); // render a paginate skip  addPaginateSkip(); // render the current number and it\u0026#39;s adjacent numbers as well  for (let i = current - 1; i \u0026lt;= current + 1; i++) { addPaginateNum(array, i, current, itemsPerPage, numPages); } // render a paginate skip  addPaginateSkip(); // render the last number  addPaginateNum(array, numPages, current, itemsPerPage, numPages); // if current page number is at the end ranges (greater than max - 3)  } else if (current \u0026gt;= numPages - 2) { // render the first two numbers  addPaginateNum(array, 1, current, itemsPerPage, numPages); addPaginateNum(array, 2, current, itemsPerPage, numPages); // render a paginate skip  addPaginateSkip(); // render the end numbers  for (let i = numPages - 3; i \u0026lt;= numPages; i++) { addPaginateNum(array, i, current, itemsPerPage, numPages); } } } }; // add a single pagination number to the DOM const addPaginateNum = (array, i, current, itemsPerPage, numPages) =\u0026gt; { // target our DOM elements for manipulation  const paginateItems = document.getElementById(\u0026#39;paginate-items\u0026#39;); // create the pagination number element  const paginateNum = document.createElement(\u0026#39;div\u0026#39;); paginateNum.classList = \u0026#39;paginate-num\u0026#39;; paginateNum.textContent = i; // apply styling if number matches current number  if (current === i) { paginateNum.classList.add(\u0026#39;active\u0026#39;); } // apply click event for pagination element  paginateNum.onclick = function () { // re-render the pagination elements with pagination item number  paginate(array, i); // render content based on pagination item number  renderContent(array, i, itemsPerPage, numPages); }; // add number into pagination container  paginateItems.append(paginateNum); }; // add a \u0026#34;...\u0026#34; pagination item for long pagination lists const addPaginateSkip = () =\u0026gt; { // target our DOM elements for manipulation  const paginateItems = document.getElementById(\u0026#39;paginate-items\u0026#39;); // create the pagination skip  const paginateSkip = document.createElement(\u0026#39;div\u0026#39;); paginateSkip.classList = \u0026#39;paginate-skip\u0026#39;; paginateSkip.textContent = \u0026#39;. . .\u0026#39;; //add the pagination skip  paginateItems.append(paginateSkip); }; // render the content const renderContent = (array, current, itemsPerPage, numPages) =\u0026gt; { // if current page number is out of range, do nothing  if (current \u0026lt; 1 || current \u0026gt; numPages) { // exit the function so that nothing else is done  return; } // using the page number, determine what slice of the list to render  current -= 1; let increment = current * itemsPerPage; // as the page number increases, the bottom and top of the slice should  // increase accordingly (e.g. (0, 5) to (5, 10) etc. )  let start = 0 + increment; let end = itemsPerPage + increment; let activeData = array.slice(start, end); // target the content container to add items to  let content = document.getElementById(\u0026#39;content\u0026#39;); // empty out the current contents  content.innerHTML = \u0026#39;\u0026#39;; // fill with the new content  activeData.forEach((item) =\u0026gt; { const listItem = document.createElement(\u0026#39;li\u0026#39;); listItem.textContent = item; content.append(listItem); }); };   Live Examples With a long list:\n With a shorter list:\n Conclusion I hope you\u0026rsquo;ve enjoyed how I wrap my head around making pagination. With a little thoughtfulness, making a consistent predictable pagination is relatively simple. Till next time!\n","permalink":"https://cambuchi.github.io/blog/posts/pagination-break-down/","summary":"Pagination is a way to display only a set number of items on your page while allowing easy access to the other items if needed. This is a guide to walk you through the thought process, white-boarding, and implementation of pagination in vanilla JavaScript.","title":"Pagination Break Down"},{"content":"Introduction When it comes to building a blog/portfolio site, beginners are often directed to services like WordPress or Squarespace. This is understandable, as these website builders provide a tightly guided creation process. Past this beginner plateau however, the difficulty in creating and hosting a fully customizable site increases dramatically. Some services can alleviate this, but often for a price.\nAfter reading this thread on reddit I realized that even for people with web development experience, the lack of easily available instructions have many defaulting back to this beginner step as well. If you think more advanced web-content creation involves diving into code or crafting HTML for every post, then website builders with built in editors would undoubtedly seem very appealing. However, I am here to tell you that this is not the case and that similar tools and easy to use workflows are available for custom built sites as well.\nThis guide aims to create a guided \u0026ldquo;mid-tier\u0026rdquo; plateau that those beginning their web development journey can reference to help them move beyond standard website builders. We will build a site with Hugo, apply a site theme, use Forestry.io for our CMS, and host with GitHub Pages.\nWhy this stack? 1. Free  From beginning to end, this entire process is free. This blog you are looking at right now was created with this stack for free and does not cost anything to host. GitHub Pages is already set up to easily support paid custom domains if you want a different URL for your blog.  2. Easy content creation with a CMS  Making content is just as easy as website builders. You get a fully functional online text/markdown editor that automatically commits to your sites repository. No need to open code or edit HTML just to make a new post. Here is an example of me making a new post for my blog on Forestry:  3. Easy to use/workflow  Create content on Forestry (this commits to your repository) Run a script that does the following  Pull update from repository into your build directory Build site using Hugo Add, commit, and push changes to your repository   GitHub Pages detects that you made changes and automatically updates your site within minutes. After creating the content, it takes me less than 30 seconds to update my site with the new post.  4. Easy to set-up  Hugo and Hugo Themes do all of the heavy lifting for generating your website. No need to build all the logic and HTML for tags. categories, search functionality, syntax highlighting, etc. Generating a site and getting it online can be done in less than an hour.  5. Customization  Since everything is HTML and JavaScript, changing the site layout and little details is completely under your control. No more default footers advertising WordPress or Squarespace on your site. Toggle or button not where you want it? Moving elements around and custom CSS is easily done in the Hugo framework.  6. Git and GitHub Integration  At the end of this you will have a site with a commit history for both posts and site edits. This is built into the build and deploy scripts so it\u0026rsquo;s very integrated. Somehow broke your site? Just git checkout back to a working commit.  Assumptions  This guide is written for Windows 10, but very applicable to Linux/Mac.  Git and Git Bash are installed. This is how I use Git and run bash scripts on Windows 10.   Visual Studio Code was used to edit and create all of the files necessary. For customizing: you have some understanding of how HTML/CSS/Javascript work. You can manipulate the DOM and find out classes/selectors for elements from the console.  Let\u0026rsquo;s begin!\nGitHub Setup Before we get started, make sure you have a GitHub account. It\u0026rsquo;s free, easy to set up, and incredibly useful.\n The first step is to create two repositories in GitHub. One for the files you use to generate your website and the other for serving your static website files. Make sure both are public and empty.  Repo #1: \u0026lt;your-website-build\u0026gt;  The above repository will be used for your website\u0026rsquo;s build. I recommend something like blog-build, blog-source, portfolio-build, etc.   Repo #2: \u0026lt;your-website\u0026gt;   The above repository will be used to serve your generated web files to the internet. I recommend something like blog, portfolio, or \u0026lt;username\u0026gt;.github.io (special repository name).\n Note: If you set Repo #2 to blog your website URL will be \u0026lt;username\u0026gt;.github.io/blog/, if instead you want \u0026lt;username\u0026gt;.github.io to direct to your site, then use that as the name.\nE.g. your username is coolperson, set Repo #2 to coolperson.github.io.\n      Throughout this guide I will refer to Repo #1 as the build repository/folder/directory and Repo #2 as the site repository/folder/directory.  Hugo Setup This will setup Hugo on your system so that you can use it as a command from Git Bash/Terminals. Hugo is a framework for building websites that automates much of the process while still allowing for very deep customization. Commands like hugo server will run a local live-server for easy website previewing/tweaking and hugo will generate the static files you will serve as your website.\nThe following instructions are specific for Windows 10. Mac and Linux users can find installation instructions here.\nSetup  Create a new folder C:\\Hugo. Create a sub-folder in the Hugo folder C:\\Hugo\\bin. Download the latest zipped Hugo executable for your system from Hugo Releases.  For me this was hugo_0.91.2_Windows-64bit.zip.   Extract all contents to your C:\\Hugo\\bin folder.   Your directory should look like the following:\n C:\r└───Hugo\r└───bin\r├───hugo.exe\r├───LICENSE\r└───README.md\r    Add the C:\\Hugo\\bin folder to Windows PATH settings.  Hit the Windows + R key combination or from the start menu type run and hit enter. In the run application, type SystemPropertiesAdvanced and hit enter.\n Click on Environment Variables... on the bottom right.  Under User variables double click on PATH (might be Path).  If you are an admin and they only user of your computer feel free to add to the PATH under System variables.   Click on New. Type C:\\Hugo\\bin hit enter and then click OK. Click OK on the Environment Variables window, and then OK on the System Properties window.    Verify At this point we need to run a few commands to verify that the executable is ready to use. To ensure that the PATH environment variables have propagated, it\u0026rsquo;s best to restart your computer. At the very least, make sure Git Bash and any Terminal apps are fully closed.\n  Open Git Bash.\n  Type hugo help and hit enter.\n  You should see output that starts with:\n hugo is the main command, used to build your Hugo site.\rHugo is a Fast and Flexible Static Site Generator\rbuilt with love by spf13 and friends in Go.\rComplete documentation is available at https://gohugo.io/.\r   If you see that, success! You have correctly installed Hugo.\n  If the installation was not successful, please consult the official Hugo instructions for installing on Windows here.\n  Build \u0026amp; Theme Site Now for the meat and potatoes. We will build the site with Hugo, attach our theme of choice, rig it all up to GitHub, and deploy to GitHub Pages. Let\u0026rsquo;s go!\nCreate the GitHub build directory.   On your build repository on GitHub (Repo#1), copy the HTTPS link. It should look something like https://github.com/\u0026lt;username\u0026gt;/blog-build.git.\n  Git Bash into the folder where you want to keep your build directory.\n cd documents/github\r  Pay special attention to the slashes! Windows file paths with \\ will not work in Unix based utilities. Alternatively, you can right click in the folder you want and select Git Bash here from the context menu.    Clone your build repository:\n git clone https://github.com/\u0026lt;username\u0026gt;/blog-build.git\r   A new empty folder with your repository name should now exist in the directory. E.g. documents\\github\\blog-build.\n  Build the site with Hugo and attach a theme.   In the Git Bash terminal, build your Hugo site into the newly created directory with the following:\n hugo new site \u0026lt;folder-name\u0026gt; -f yml --force\r  E.g. hugo new site blog-build -f yml --force. You should see a message in the terminal congratulating you.   Note: feel free to omit -f yml if you want to use the default toml files for your configurations. I am more familiar with yaml/yml files and find them easier to read but they are both quite similar.\n   Next is theming, our theme in this example will be PaperMod. Feel free to browse the many themes at https://themes.gohugo.io/ for other options.\n  In the terminal, go into the build directory.\n cd \u0026lt;folder-name\u0026gt;\r  E.g. cd blog-build    Now that we\u0026rsquo;re inside our build folder, run:\n git clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1\r  Note: to update the theme, go into the PaperMod theme folder and git pull.\nE.g. cd themes/PaperMod followed by git pull.\n  The next couple steps are optional but will better flesh out your site on the first build and help you understand what\u0026rsquo;s going on. I highly recommend you do them.\n   Optional: Populate your config file.\n Go to: config.yml Download and replace your config.yml file with the file above or open your config.yml file and replace the contents. Your config file should be in the root of your build folder.   Important: on line 1 of config.yml, change baseURL: \u0026quot;https://examplesite.com/\u0026quot; from the example site to the link that your own site will occupy. An example:\n1  baseURL: \u0026#34;https://cambuchi.github.io/blog\u0026#34;   If you do not do this, then when you turn on GitHub Pages your site will not render correctly.\n   Optional: Create a skeleton post.\n Go to: helloworld.md Download the helloworld.md file and place it into content\\posts\\ in the root of your build folder. E.g. blog-build\\content\\posts\\helloworld.md.    Let\u0026rsquo;s leverage one of Hugo\u0026rsquo;s tools and preview our site on a local live server! With terminal pointed at your build\u0026rsquo;s root directory, run:\n hugo server\r   You should see a message in the terminal with a line that says\n Web Server is available at http://localhost:1313/blog/ (bind address 127.0.0.1)\r   Visit the local host link (in the above case http://localhost:1313/blog/) in your web browser and you should see a live preview of how your site currently looks! Ain\u0026rsquo;t she a beauty?\n  Link Site Repo as a Submodule Next we will link our site repository (Repo #2) so that when the site gets built, GitHub pages detects the update and immediately publishes our changes to our domain.\n  First we need to remove the public directory from the build repository. This is so that we can use it as a submodule for our site repository. Inside the build root directory:\n rm -rf public\r   On your site repository on GitHub, copy the HTTPS link. It should look something like https://github.com/\u0026lt;username\u0026gt;/blog.git. With that we can add our site directory as a submodule:\n git submodule add -b main \u0026lt;HTTPS-repository-link\u0026gt; public\r As an actual example:\n git submodule add -b main https://github.com/coolperson/blog.git public\r  Note: depending on your Git/GitHub settings, main might have to be replaced with master. You can easily determine which to use with Git Bash. When pointed at a root folder, there will be parentheses after the file path telling you which branch you are on.\nAs you can see from my example above in the blue text. My branch is main.\n   Great! Now when we run hugo our site will be generated into public, and since public is a submodule with an origin at our site repository, when public gets pushed it heads into GitHub, automatically triggering GitHub Pages to update our website.\n  Let\u0026rsquo;s populate our GitHub\u0026rsquo;s build repository so that we have a branch for our CMS to hook onto and our site repository so that there is a commit for git to main branch. This first commit will be the only time that we do this manually. Enter the following while the Terminal is pointed at the build\u0026rsquo;s root folder.\n hugo\rgit add .\rgit commit -m \u0026quot;First commit\u0026quot;\rgit push origin main\r Now bash into the public folder and run those same commands.\n cd public\rgit add .\rgit commit -m \u0026quot;First commit\u0026quot;\rgit push origin main\r Forestry.io Setup (CMS) Now that our site is built and rigged up to GitHub, let\u0026rsquo;s add in a CMS so that content creation is as simple as possible. Before we get started head on over to Forestry.io and create your account. It’s free for personal use and allows you to add up to 3 users per website.\n  In the top right-hand corner of the page, click Add Site.\n     Then select Hugo as your static site generator.\n     Choose GitHub as the Git provider.\n     A browser window (not pictured) should then pop up asking for your credentials in order to authenticate.\n  After authentication simply select the your build repository (Repo #1), not your site repository. Pick the main branch of your repository.\n    Forestry should detect your config file and display Config file found!. If not, then make sure Hugo is properly set up.\n   That\u0026rsquo;s it! Forestry is now set up as a CMS for your site. We will go over the workflow and how to use Forestry in more detail at the end.\nAutomating Since changing directories, pulling, adding, committing, and pushing all the time is tedious, we will also write a few bash scripts to automate updating our build and deploying our site.\n Note: All scripts will be created and saved onto the build\u0026rsquo;s root directory.\n  First we will create a helper function to change directories since terminal cannot execute cd when called from a script. See here for more details.   path.sh\n1 2 3 4 5 6  # Filename: path.sh # This file should be sourced function public() { cd \u0026#34;public\u0026#34; }      Next we will create a script that updates our build.   update.sh\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  #!/bin/sh # If any part of the script fails the deploy stops. set -e # Status message printf \u0026#34;\\033[0;32mUpdating build to GitHub…\\033[0m\\n\u0026#34; # Update with any commits the CMS might have added. git pull # Build the project.  hugo # Add changes to git.  git add . # Commit changes.  current=\u0026#34;`date +\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;`\u0026#34; msg=\u0026#34;Updated build: $current\u0026#34; git commit -m \u0026#34;$msg\u0026#34; # Push source.  git push origin main      Lastly we will create a script that builds our static files and deploys our site.   deploy.sh\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  #!/bin/sh # Source the public directory to cd into. source ./path.sh # If any part of the script fails the deploy stops. set -e # Status message. printf \u0026#34;\\033[0;32mDeploying updates to GitHub…\\033[0m\\n\u0026#34; # Go to public folder. public # Add changes to git.  git add . # Commit changes.  current=\u0026#34;`date +\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;`\u0026#34; msg=\u0026#34;Deployed site: $current\u0026#34; git commit -m \u0026#34;$msg\u0026#34; # Push source and deploy.  git push origin main       To use a script it\u0026rsquo;s as easy as opening Git Bash in the build\u0026rsquo;s root directory and typing ./update.sh. Let\u0026rsquo;s run both scripts right now since we have completed setting up our site\u0026rsquo;s tech stack.\n1  ./update.sh   1  ./deploy.sh   Activate GitHub Pages With our site set up and ready to go, let\u0026rsquo;s turn on GitHub Pages for our site repository and get our content on the internet.\n On GitHub, go to your site repository. Click on Settings, then Pages Select the main branch in the root directory and click save.     You will need to wait about a minute or so for GitHub Pages to build your site. When your site is ready, this settings page will display a green confirmation box saying that your site is published.  Workflow With our site published online, let\u0026rsquo;s go through the work flow process. The first time we do this there is some setup involved because markdown files require a \u0026ldquo;front matter template\u0026rdquo; to let the site generator know what type of document and configuration is being made.\nInitial template creation  Navigate to your dashboard on Forestry.io. Click on your site\u0026rsquo;s repository. Click on Posts on the left. Click Create New at the top.  Since we do not have any post templates, the first time you create a new post you will need to make one. Create a new template based on existing documents.  Use the Hello World! as the template and label it something like \u0026ldquo;Blog post\u0026rdquo;.     Regular workflow  Create a new post on Forestry. Click Save on the top right when you are done. This commits your post markdown file into your GitHub repository. Git Bash into your build directory on your machine. Run update.sh and then deploy.sh  1  ./update.sh   1  ./deploy.sh   That\u0026rsquo;s it! Your web site should update with the new content in less than a minute.\nHere\u0026rsquo;s a demo of me creating a post, updating the site, and seeing the changes live online in less than a minute.\nConclusion With this tech stack, having complete control over your site while not compromising the content creation flow is easily achievable. Imagine handing over a mature site to a content creator or team of writers who don\u0026rsquo;t need to understand any development to create content for the site.\nNow when it comes to customizing your site, I find the best way is to start a local live server with hugo server and to fiddle around with your configuration files and layouts. If necessary, do not be afraid to look at the Hugo documentation. Your Hugo theme\u0026rsquo;s GitHub repository might have some tips as well. If you are familiar with web development this should not be a huge hurdle.\nJoin me next time where I will dive into how to move elements around, add elements, add pages, set custom CSS, in other words: how to customize your Hugo site. Thanks for reading!\n","permalink":"https://cambuchi.github.io/blog/posts/build-a-blog/","summary":"This guide aims to create a guided \u0026ldquo;mid-tier\u0026rdquo; plateau that those beginning their web development journey can reference to help them move beyond standard website builders. We will build a site with Hugo, apply a site theme, use Forestry.io for our CMS, and host with GitHub Pages.","title":"Build a blog with CMS \u0026 Git functionality "},{"content":"","permalink":"https://cambuchi.github.io/blog/projects/","summary":"","title":"Projects"}]